<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason Rao&#39;s Blog</title>
  
  <subtitle>态度决定一切 细节决定成败</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://raoyangsheng.com/"/>
  <updated>2019-12-05T06:12:56.155Z</updated>
  <id>https://raoyangsheng.com/</id>
  
  <author>
    <name>Jason Rao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何让Python pip使用国内镜像体验飞一样的速度</title>
    <link href="https://raoyangsheng.com/2018/09/it-python-01.html"/>
    <id>https://raoyangsheng.com/2018/09/it-python-01.html</id>
    <published>2018-09-01T11:25:49.000Z</published>
    <updated>2019-12-05T06:12:56.155Z</updated>
    
    <content type="html"><![CDATA[<p><strong>相信大家在使用pip安装依赖包时很头疼，下载的网速超级慢，那是因为使用pip install命令时默认使用国外的源：<a href="https://files.pythonhosted.org，不妨ping一下，是美国的IP" target="_blank" rel="noopener">https://files.pythonhosted.org，不妨ping一下，是美国的IP</a>.</strong> </p><h4 id="第1步：默认国外源："><a href="#第1步：默认国外源：" class="headerlink" title="第1步：默认国外源："></a>第1步：默认国外源：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">如下命令：</span><br><span class="line">(venv) iMac:20180921-demo raoys$ pip3 install --upgrade pip</span><br><span class="line">Collecting pip</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/5f/25/</span><br><span class="line">  e52d3f31441505a5f3af41213346e5b6c221c9e086a166f3703d2ddaf940/pip-18.0-py2.py3-none-any.whl (1.3MB)</span><br><span class="line">    100% |████████████████████████████████| 1.3MB 556kB/s </span><br><span class="line">Installing collected packages: pip</span><br><span class="line">  Found existing installation: pip 10.0.1</span><br><span class="line">    Uninstalling pip-10.0.1:</span><br><span class="line">      Successfully uninstalled pip-10.0.1</span><br><span class="line">Successfully installed pip-18.0</span><br></pre></td></tr></table></figure><p>下面教大家如何国内的源，体验飞的速度！！！</p><h4 id="第2步：介绍有哪些国内源："><a href="#第2步：介绍有哪些国内源：" class="headerlink" title="第2步：介绍有哪些国内源："></a>第2步：介绍有哪些国内源：</h4> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">清华：https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">阿里云：http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line"></span><br><span class="line">华中理工大学：http://pypi.hustunique.com/</span><br><span class="line"></span><br><span class="line">山东理工大学：http://pypi.sdutlinux.org/ </span><br><span class="line"></span><br><span class="line">豆瓣：http://pypi.douban.com/simple/</span><br><span class="line"></span><br><span class="line">需要注意的是新版ubuntu要求使用https源。</span><br></pre></td></tr></table></figure><h4 id="第3步：开始使用国内源："><a href="#第3步：开始使用国内源：" class="headerlink" title="第3步：开始使用国内源："></a>第3步：开始使用国内源：</h4><p> <code>A、临时使用：可以在使用pip的时候加参数“-i https://pypi.tuna.tsinghua.edu.cn/simple”</code><br> <code>例如：pip install -i https://pypi.tuna.tsinghua.edu.cn/simple requests，这样就会从清华这边的镜像去安装requests库。</code><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(venv) iMac:20180921-demo raoys$ pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple requests</span><br><span class="line">Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">Collecting requests</span><br><span class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/65/47</span><br><span class="line">  /7e02164a2a3db50ed6d8a6ab1d6d60b69c4c3fdf57a284257925dfc12bda/requests-2.19.1-py2.py3-none-any.whl (91kB)</span><br><span class="line">    100% |████████████████████████████████| 92kB 1.4MB/s </span><br><span class="line">Collecting urllib3&lt;1.24,&gt;=1.21.1 (from requests)</span><br><span class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/bd/c9</span><br><span class="line">  /6fdd990019071a4a32a5e7cb78a1d92c53851ef4f56f62a3486e6a7d8ffb/urllib3-1.23-py2.py3-none-any.whl (133kB)</span><br><span class="line">    100% |████████████████████████████████| 143kB 399kB/s </span><br><span class="line">Collecting chardet&lt;3.1.0,&gt;=3.0.2 (from requests)</span><br><span class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/bc/a9</span><br><span class="line">  /01ffebfb562e4274b6487b4bb1ddec7ca55ec7510b22e4c51f14098443b8/chardet-3.0.4-py2.py3-none-any.whl (133kB)</span><br><span class="line">    100% |████████████████████████████████| 143kB 2.1MB/s </span><br><span class="line">Collecting idna&lt;2.8,&gt;=2.5 (from requests)</span><br><span class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/4b/2a</span><br><span class="line">  /0276479a4b3caeb8a8c1af2f8e4355746a97fab05a372e4a2c6a6b876165/idna-2.7-py2.py3-none-any.whl (58kB)</span><br><span class="line">    100% |████████████████████████████████| 61kB 2.2MB/s </span><br><span class="line">Collecting certifi&gt;=2017.4.17 (from requests)</span><br><span class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/df/f7</span><br><span class="line">  /04fee6ac349e915b82171f8e23cee63644d83663b34c539f7a09aed18f9e/certifi-2018.8.24-py2.py3-none-any.whl (147kB)</span><br><span class="line">    100% |████████████████████████████████| 153kB 1.9MB/s </span><br><span class="line">Installing collected packages: urllib3, chardet, idna, certifi, requests</span><br><span class="line">Successfully installed certifi-2018.8.24 chardet-3.0.4 idna-2.7 requests-2.19.1 urllib3-1.23</span><br><span class="line">(venv) iMac:20180921-demo raoys$</span><br></pre></td></tr></table></figure></p><p><code>B、永久修改，一劳永逸：</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Linux: 修改 ~/.pip/pip.conf (没有就创建一个文件夹及文件。文件夹要加“.”，表示是隐藏文件夹)</span><br><span class="line">MacOS: 修改 ~/.pip/pip.conf (没有就创建一个文件夹及文件。文件夹要加“.”，表示是隐藏文件夹)</span><br><span class="line">windows:，直接在user目录中创建一个pip目录，再新建文件pip.ini。例如：C:\Users\jason\pip\pip.ini</span><br><span class="line"></span><br><span class="line">内容如下：</span><br><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure></p><p><code>C、配置后直接使用pip instal命令即可，无需加任何参数，如下命令：</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(venv) iMac:20180921-demo raoys$ cd ~</span><br><span class="line">(venv) iMac:~ raoys$ mkdir .pip</span><br><span class="line">(venv) iMac:~ raoys$ cd .pip/</span><br><span class="line">(venv) iMac:.pip raoys$ vi pip.conf</span><br><span class="line">(venv) iMac:.pip raoys$ pip3 install beautifulsoup4</span><br><span class="line">Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">Collecting beautifulsoup4</span><br><span class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/21/0a</span><br><span class="line">  /47fdf541c97fd9b6a610cb5fd518175308a7cc60569962e776ac52420387/beautifulsoup4-4.6.3-py3-none-any.whl (90kB)</span><br><span class="line">    100% |████████████████████████████████| 92kB 1.3MB/s </span><br><span class="line">Installing collected packages: beautifulsoup4</span><br><span class="line">Successfully installed beautifulsoup4-4.6.3</span><br><span class="line">(venv) iMac:.pip raoys$</span><br></pre></td></tr></table></figure></p><p>以上就是pip使用国内源的所有步骤。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;相信大家在使用pip安装依赖包时很头疼，下载的网速超级慢，那是因为使用pip install命令时默认使用国外的源：&lt;a href=&quot;https://files.pythonhosted.org，不妨ping一下，是美国的IP&quot; target=&quot;_blank
      
    
    </summary>
    
      <category term="后端" scheme="https://raoyangsheng.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Python" scheme="https://raoyangsheng.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>git remote: HTTP Basic: Access denied 错误解决办法</title>
    <link href="https://raoyangsheng.com/2017/10/it-git-02.html"/>
    <id>https://raoyangsheng.com/2017/10/it-git-02.html</id>
    <published>2017-10-13T14:13:13.000Z</published>
    <updated>2019-12-05T06:12:56.151Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题描述</strong> </p><ul><li>git push or git clone 报 HTTP Basic: Access denied 错误</li></ul><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><pre><code>本地git配置的用户名、密码与gitlabs上注册的用户名、密码不一致。</code></pre><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 如果账号密码有变动 用这个命令：</span><br><span class="line">    git config –-system –-unset credential.helper </span><br><span class="line">    </span><br><span class="line">    然后重新输入账号密码 应该就能解决了；</span><br><span class="line">    </span><br><span class="line">2. 如果用了第一个命令 还不能解决问题那么 用这个命令：</span><br><span class="line">    git config –-global http.emptyAuth true</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;问题描述&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git push or git clone 报 HTTP Basic: Access denied 错误&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;head
      
    
    </summary>
    
      <category term="后端" scheme="https://raoyangsheng.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Git" scheme="https://raoyangsheng.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Redis工具类对各种数据类型的操作</title>
    <link href="https://raoyangsheng.com/2017/10/it-redis-01.html"/>
    <id>https://raoyangsheng.com/2017/10/it-redis-01.html</id>
    <published>2017-10-13T13:04:22.000Z</published>
    <updated>2019-12-05T06:12:56.156Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Redis工具类对string，list，hash，set，zset数据类型的操作。</strong> </p><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="Redis代码配置"><a href="#Redis代码配置" class="headerlink" title="Redis代码配置"></a>Redis代码配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.cache.annotation.EnableCaching;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line">import org.springframework.data.redis.core.*;</span><br><span class="line">  </span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * Redis模板配置，缓存配置</span><br><span class="line"> */</span><br><span class="line">  </span><br><span class="line">@Configuration</span><br><span class="line">@EnableCaching</span><br><span class="line">public class RedisConfig &#123;</span><br><span class="line">  </span><br><span class="line">    @Autowired</span><br><span class="line">    RedisConnectionFactory redisConnectionFactory;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 实例化 RedisTemplate 对象</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public RedisTemplate&lt;String, Object&gt; functionDomainRedisTemplate() &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = new RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">        initDomainRedisTemplate(redisTemplate, redisConnectionFactory);</span><br><span class="line">        return redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 设置数据存入 redis 的序列化方式</span><br><span class="line">     */</span><br><span class="line">    private void initDomainRedisTemplate(RedisTemplate&lt;String, Object&gt; redisTemplate, RedisConnectionFactory factory) &#123;</span><br><span class="line">        /***</span><br><span class="line">        redisTemplate.setKeySerializer(new StringRedisSerializer());</span><br><span class="line">        redisTemplate.setValueSerializer(new JdkSerializationRedisSerializer());</span><br><span class="line">        redisTemplate.setHashKeySerializer(new StringRedisSerializer());</span><br><span class="line">        redisTemplate.setHashValueSerializer(new Jackson2JsonRedisSerializer(Object.class));</span><br><span class="line">        */</span><br><span class="line">        redisTemplate.setConnectionFactory(factory);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 实例化 HashOperations 对象,可以使用 Hash 类型操作</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public HashOperations&lt;String, String, Object&gt; hashOperations(RedisTemplate&lt;String, Object&gt; redisTemplate) &#123;</span><br><span class="line">        return redisTemplate.opsForHash();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 实例化 ValueOperations 对象,可以使用 String 操作</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public ValueOperations&lt;String, Object&gt; valueOperations(RedisTemplate&lt;String, Object&gt; redisTemplate) &#123;</span><br><span class="line">        return redisTemplate.opsForValue();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 实例化 ListOperations 对象,可以使用 List 操作</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public ListOperations&lt;String, Object&gt; listOperations(RedisTemplate&lt;String, Object&gt; redisTemplate) &#123;</span><br><span class="line">        return redisTemplate.opsForList();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 实例化 SetOperations 对象,可以使用 Set 操作</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public SetOperations&lt;String, Object&gt; setOperations(RedisTemplate&lt;String, Object&gt; redisTemplate) &#123;</span><br><span class="line">        return redisTemplate.opsForSet();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 实例化 ZSetOperations 对象,可以使用 ZSet 操作</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public ZSetOperations&lt;String, Object&gt; zSetOperations(RedisTemplate&lt;String, Object&gt; redisTemplate) &#123;</span><br><span class="line">        return redisTemplate.opsForZSet();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Redis操作代码"><a href="#Redis操作代码" class="headerlink" title="Redis操作代码"></a>Redis操作代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.data.redis.core.*;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">  </span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Set;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line">  </span><br><span class="line">@Service</span><br><span class="line">public class RedisService &#123;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line">     // HashMap操作</span><br><span class="line">    @Resource</span><br><span class="line">    private HashOperations&lt;String, String, Object&gt; hashOperations;</span><br><span class="line">    // Object操作</span><br><span class="line">    @Resource</span><br><span class="line">    private ValueOperations&lt;String, Object&gt; valueOperations;</span><br><span class="line">     // List操作</span><br><span class="line">    @Resource</span><br><span class="line">    private ListOperations&lt;String, Object&gt; listOperations;</span><br><span class="line">  </span><br><span class="line">     // set操作</span><br><span class="line">    @Resource</span><br><span class="line">    private SetOperations&lt;String, Object&gt; setOperations;</span><br><span class="line">     // ZSet操作</span><br><span class="line">    @Resource</span><br><span class="line">    private ZSetOperations&lt;String, Object&gt; zSetOperations;</span><br><span class="line">  </span><br><span class="line">    //---------------------------------------------------------------------</span><br><span class="line">    // redisTemplate</span><br><span class="line">    //---------------------------------------------------------------------</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 判断key是否存在</span><br><span class="line">     * @param key</span><br><span class="line">     */</span><br><span class="line">    public boolean hasKey(String key) &#123;</span><br><span class="line">        return redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 删除key</span><br><span class="line">     * @param key</span><br><span class="line">     */</span><br><span class="line">    public void delete(String key)&#123;</span><br><span class="line">        redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 判断指定key的hashKey是否存在</span><br><span class="line">     * @param key</span><br><span class="line">     * @param hashKey</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public boolean hasKey(String key, String hashKey) &#123;</span><br><span class="line">        return redisTemplate.opsForHash().hasKey(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 设置超时时间</span><br><span class="line">     * @param key</span><br><span class="line">     * @param timeout</span><br><span class="line">     * @param unit</span><br><span class="line">     */</span><br><span class="line">    public void expire(String key, final long timeout, final TimeUnit unit) &#123;</span><br><span class="line">        redisTemplate.expire(key, timeout, unit);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 获取过期时间</span><br><span class="line">     * @param key</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public long ttl(String key)&#123;</span><br><span class="line">        return redisTemplate.getExpire(key);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 获取指定pattern的key</span><br><span class="line">     * @param pattern</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public Set&lt;String&gt; keys(String pattern) &#123;</span><br><span class="line">        return redisTemplate.keys(pattern);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 删除多个key</span><br><span class="line">     * @param keys</span><br><span class="line">     */</span><br><span class="line">    public void delete(Set&lt;String&gt; keys) &#123;</span><br><span class="line">        redisTemplate.delete(keys);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 设置过期时间</span><br><span class="line">     * @param key</span><br><span class="line">     * @param expire</span><br><span class="line">     */</span><br><span class="line">    private void setExpire (String key,long expire)&#123;</span><br><span class="line">        if (expire != -1) &#123;</span><br><span class="line">            redisTemplate.expire(key, expire, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    //---------------------------------------------------------------------</span><br><span class="line">    // ValueOperations -&gt; Redis String/Value 操作</span><br><span class="line">    //---------------------------------------------------------------------</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 设置key-value值</span><br><span class="line">     */</span><br><span class="line">    public void addValue(String key, Object value,long expire)&#123;</span><br><span class="line">        valueOperations.set(key, value);</span><br><span class="line">  </span><br><span class="line">        setExpire(key,expire);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 设置key-value值,传入时间单位</span><br><span class="line">     */</span><br><span class="line">    public void addValue(String key, Object value,long expire, TimeUnit timeUnit)&#123;</span><br><span class="line">        valueOperations.set(key, value, expire, timeUnit);</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 设置key-value值, 无过期时间</span><br><span class="line">     */</span><br><span class="line">    public void addValue(String key, Object value)&#123;</span><br><span class="line">        valueOperations.set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 获取key的值</span><br><span class="line">     *</span><br><span class="line">     */</span><br><span class="line">    public Object getValue(String key)&#123;</span><br><span class="line">        return valueOperations.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    //---------------------------------------------------------------------</span><br><span class="line">    // HashOperations -&gt; Redis Redis Hash 操作</span><br><span class="line">    //---------------------------------------------------------------------</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 向redis 中添加内容</span><br><span class="line">     * @param key       保存key</span><br><span class="line">     * @param hashKey   hashKey</span><br><span class="line">     * @param data      保存对象 data</span><br><span class="line">     * @param expire    过期时间    -1：表示不过期</span><br><span class="line">     */</span><br><span class="line">    public void addHashValue(String key,String hashKey, Object data, long expire) &#123;</span><br><span class="line">        hashOperations.put(key, hashKey, data);</span><br><span class="line">  </span><br><span class="line">        setExpire(key,expire);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * Hash 添加数据</span><br><span class="line">     * @param key   key</span><br><span class="line">     * @param map   data</span><br><span class="line">     */</span><br><span class="line">    public void addAllHashValue(String key, Map&lt;String, Object&gt; map, long expire) &#123;</span><br><span class="line">        hashOperations.putAll(key, map);</span><br><span class="line">  </span><br><span class="line">        setExpire(key,expire);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 删除hash key</span><br><span class="line">     * @param key       key</span><br><span class="line">     * @param hashKey   hashKey</span><br><span class="line">     */</span><br><span class="line">    public long deleteHashValue(String key, String hashKey) &#123;</span><br><span class="line">        return hashOperations.delete(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 获取数据</span><br><span class="line">     */</span><br><span class="line">    public Object getHashValue(String key, String hashKey) &#123;</span><br><span class="line">        return hashOperations.get(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 批量获取数据</span><br><span class="line">     */</span><br><span class="line">    public List&lt;Object&gt; getHashAllValue(String key) &#123;</span><br><span class="line">        return hashOperations.values(key);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 批量获取指定hashKey的数据</span><br><span class="line">     */</span><br><span class="line">    public List&lt;Object&gt; getHashMultiValue(String key, List&lt;String&gt; hashKeys) &#123;</span><br><span class="line">        return  hashOperations.multiGet(key, hashKeys);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 获取hash数量</span><br><span class="line">     */</span><br><span class="line">    public Long getHashCount(String key) &#123;</span><br><span class="line">        return hashOperations.size(key);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    //---------------------------------------------------------------------</span><br><span class="line">    // ZSetOperations -&gt; Redis Sort Set 操作</span><br><span class="line">    //---------------------------------------------------------------------</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 设置zset值</span><br><span class="line">     */</span><br><span class="line">    public boolean addZSetValue(String key, Object member, long score)&#123;</span><br><span class="line">        return zSetOperations.add(key, member, score);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 设置zset值</span><br><span class="line">     */</span><br><span class="line">    public boolean addZSetValue(String key, Object member, double score)&#123;</span><br><span class="line">        return zSetOperations.add(key, member, score);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 批量设置zset值</span><br><span class="line">     */</span><br><span class="line">    public long addBatchZSetValue(String key, Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; tuples)&#123;</span><br><span class="line">        return zSetOperations.add(key, tuples);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 自增zset值</span><br><span class="line">     */</span><br><span class="line">    public void incZSetValue(String key, String member, long delta)&#123;</span><br><span class="line">        zSetOperations.incrementScore(key, member, delta);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 获取zset数量</span><br><span class="line">     */</span><br><span class="line">    public long getZSetScore(String key, String member)&#123;</span><br><span class="line">        Double score = zSetOperations.score(key, member);</span><br><span class="line">        if(score==null)&#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return score.longValue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 获取有序集 key 中成员 member 的排名 。其中有序集成员按 score 值递减 (从小到大) 排序。</span><br><span class="line">     */</span><br><span class="line">    public Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; getZSetRank(String key, long start, long end)&#123;</span><br><span class="line">        return zSetOperations.rangeWithScores(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    //---------------------------------------------------------------------</span><br><span class="line">    // listOperations -&gt; Redis List() 操作</span><br><span class="line">    //---------------------------------------------------------------------</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 添加list列表</span><br><span class="line">     */</span><br><span class="line">    public void addListValue(String key,Object list)&#123;</span><br><span class="line">        listOperations.leftPush(key,list);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 获取指定Key对应的list</span><br><span class="line">     */</span><br><span class="line">    public Object getListValue(String key)&#123;</span><br><span class="line">        return listOperations.leftPop(key);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    //---------------------------------------------------------------------</span><br><span class="line">    // setOperations -&gt; Redis Set() 操作</span><br><span class="line">    //---------------------------------------------------------------------</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 添加Set集合集合</span><br><span class="line">     */</span><br><span class="line">    public void addSetValue(String key,Object list)&#123;</span><br><span class="line">        setOperations.add(key,list);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 获取指定Key对应的set</span><br><span class="line">     */</span><br><span class="line">    public Object getSetValue(String key)&#123;</span><br><span class="line">        return setOperations.members(key);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * 获取并移除指定key的值</span><br><span class="line">     */</span><br><span class="line">    public Object popSetValue(String key)&#123;</span><br><span class="line">        return setOperations.pop(key);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Redis工具类对string，list，hash，set，zset数据类型的操作。&lt;/strong&gt; &lt;/p&gt;
&lt;h4 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlink&quot; title=&quot;添加依赖&quot;&gt;&lt;/a&gt;添加依赖&lt;/
      
    
    </summary>
    
      <category term="后端" scheme="https://raoyangsheng.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Redis" scheme="https://raoyangsheng.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令列表</title>
    <link href="https://raoyangsheng.com/2017/10/it-git-01.html"/>
    <id>https://raoyangsheng.com/2017/10/it-git-01.html</id>
    <published>2017-10-12T14:13:13.000Z</published>
    <updated>2019-12-05T06:12:56.151Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Git常用命令整理：</strong> </p><ul><li>根据多个项目实践整理下面的git命令大全，留着后续使用。</li></ul><h4 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h4><pre><code># 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url]</code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><pre><code># 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name &quot;[name]&quot;$ git config [--global] user.email &quot;[email address]&quot;</code></pre><h4 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h4><pre><code># 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed]</code></pre><h4 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h4><pre><code># 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ...</code></pre><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><pre><code># 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]$ git checkout -b [local branch] [remote branch]eg:$ git checkout -b v1.0 origin/v1.0# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]</code></pre><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><pre><code># 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag]</code></pre><h4 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h4><pre><code># 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat &quot;@{0 day ago}&quot;# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog</code></pre><h4 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h4><pre><code># 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all</code></pre><h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><pre><code># 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Git常用命令整理：&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据多个项目实践整理下面的git命令大全，留着后续使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;仓库&quot;&gt;&lt;a href=&quot;#仓库&quot; class=&quot;headerlink&quot; title=&quot;仓库&quot;
      
    
    </summary>
    
      <category term="后端" scheme="https://raoyangsheng.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Git" scheme="https://raoyangsheng.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Nginx负载均衡之权重配置</title>
    <link href="https://raoyangsheng.com/2017/08/it-server-nginx-02.html"/>
    <id>https://raoyangsheng.com/2017/08/it-server-nginx-02.html</id>
    <published>2017-08-02T10:17:35.000Z</published>
    <updated>2019-12-05T06:12:56.156Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Nginx负载均衡之权重配置</strong> </p><h4 id="配置如下："><a href="#配置如下：" class="headerlink" title="配置如下："></a>配置如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">user  www www;   ##nginx以www用户身份运行，需要建立www用户</span><br><span class="line">worker_processes  1;  ##工作进程，一般设置为auto自动</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">        use epoll; </span><br><span class="line">    worker_connections  65535;    ##线程，并且在系统中给到比他大的线程</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    upstream aabbccdd&#123;      ##算法</span><br><span class="line">    server 192.168.1.201:80 weight=2;   ##监控server的80端口，weigh为权重，2每访问两次，3访问一词</span><br><span class="line">    server 192.168.1.201:80 weight=2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">include       mime.types;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;                  ##设置虚拟主机</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name www.aabbccdd.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;    调度算法</span><br><span class="line">                proxy_pass http://aabbccdd; ## 与上面upstream 配置的名称一致.</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Nginx负载均衡之权重配置&lt;/strong&gt; &lt;/p&gt;
&lt;h4 id=&quot;配置如下：&quot;&gt;&lt;a href=&quot;#配置如下：&quot; class=&quot;headerlink&quot; title=&quot;配置如下：&quot;&gt;&lt;/a&gt;配置如下：&lt;/h4&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
      <category term="服务器" scheme="https://raoyangsheng.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Nginx" scheme="https://raoyangsheng.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx监听一个端口多域名转发配置</title>
    <link href="https://raoyangsheng.com/2017/08/it-server-nginx-01.html"/>
    <id>https://raoyangsheng.com/2017/08/it-server-nginx-01.html</id>
    <published>2017-08-01T10:55:35.000Z</published>
    <updated>2019-12-05T06:12:56.156Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Nginx监听一个端口多域名转发配置方法</strong> </p><h4 id="配置如下："><a href="#配置如下：" class="headerlink" title="配置如下："></a>配置如下：</h4><pre><code>worker_processes  1;events {    worker_connections  1024;}http {    include       mime.types;    default_type  application/octet-stream;    sendfile        on;    keepalive_timeout  65;    server {        listen       80;        server_name 192.168.1.x;        error_page 404 401 400  /400.html;        location / {                         root   html;            index 400.html;                }        location = /40x.html{            root html;        }    }    server {        listen       80;        server_name  test1.com.cn www.test1.com.cn;        location / {            proxy_pass  http://localhost:8080;            proxy_set_header Host $host;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            root   html;            index  index.html index.htm;        }    }    server {        listen       80;        server_name  test2.com www.test2.com;        location / {            proxy_pass  http://localhost:8081;            proxy_set_header Host $host;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            root   html;            index  index.html index.htm;        }    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Nginx监听一个端口多域名转发配置方法&lt;/strong&gt; &lt;/p&gt;
&lt;h4 id=&quot;配置如下：&quot;&gt;&lt;a href=&quot;#配置如下：&quot; class=&quot;headerlink&quot; title=&quot;配置如下：&quot;&gt;&lt;/a&gt;配置如下：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;work
      
    
    </summary>
    
      <category term="服务器" scheme="https://raoyangsheng.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Nginx" scheme="https://raoyangsheng.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>VMware中CentOS7静态IP的设置</title>
    <link href="https://raoyangsheng.com/2015/10/it-linux-centos-02.html"/>
    <id>https://raoyangsheng.com/2015/10/it-linux-centos-02.html</id>
    <published>2015-10-12T22:33:23.000Z</published>
    <updated>2019-12-05T06:12:56.155Z</updated>
    
    <content type="html"><![CDATA[<p><strong>VMware中CentOS7系统设置静态IP的步骤</strong> </p><h4 id="VMware下有三种网络连接模式"><a href="#VMware下有三种网络连接模式" class="headerlink" title="VMware下有三种网络连接模式"></a>VMware下有三种网络连接模式</h4><p>一、birdged（桥接）<br>桥接网络是指本地物理网卡和虚拟网卡通过VMnet0虚拟交换机进行桥接，物理网卡和虚拟网卡在拓扑图上处于同等地位，那么物理网卡和虚拟网卡就相当于处于同一个网段，虚拟交换机就相当于一台现实网络中的交换机,所以两个网卡的IP地址也要设置为同一网段。</p><p>二、NAT(网络地址转换)<br>NAT模式中，就是让虚拟机借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网。 NAT模式中，虚拟机的网卡和物理网卡的网络，不在同一个网络，虚拟机的网卡，是在VMware提供的一个虚拟网络。</p><p>三、Host-only(仅主机)<br>在Host-Only模式下，虚拟网络是一个全封闭的网络，它唯一能够访问的就是主机。其实Host-Only网络和NAT网络很相似，不同的地方就是Host-Only网络没有NAT服务，所以虚拟网络不能连接到Internet。主机和虚拟机之间的通信是通过VMware Network Adepter VMnet1虚拟网卡来实现的。</p><p>这里主要讨论桥接和NAT模式</p><h4 id="NAT和桥接的比较"><a href="#NAT和桥接的比较" class="headerlink" title="NAT和桥接的比较"></a>NAT和桥接的比较</h4><p>(1) NAT模式和桥接模式虚拟机都可以上外网。<br>(2) 由于NAT的网络在VMware提供的一个虚拟网络里，所以局域网其他主机是无法访问虚拟机的，而宿主机可以访问虚拟机，虚拟机可以访问局域网的所有主机，因为真实的局域网相对于NAT的虚拟网络，就是NAT的虚拟网络的外网，不懂的人可以查查NAT的相关知识。<br>(3) 桥接模式下，多个虚拟机之间可以互相访问；NAT模式下，多个虚拟机之间也可以相互访问。</p><h4 id="步骤1-在虚拟机中使用NAT"><a href="#步骤1-在虚拟机中使用NAT" class="headerlink" title="步骤1 在虚拟机中使用NAT"></a>步骤1 在虚拟机中使用NAT</h4><p><code>如图：</code><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/linux/2015-10-13-0633-linux-centos-01.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p>接下来看看在NAT模式下，进入到CentOS7系统后，该如何为其配置网络：</p><h4 id="步骤2-查看宿主机（本机）的默认网关"><a href="#步骤2-查看宿主机（本机）的默认网关" class="headerlink" title="步骤2 查看宿主机（本机）的默认网关"></a>步骤2 查看宿主机（本机）的默认网关</h4><p><code>如图：</code><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/linux/2015-10-13-0633-linux-centos-02.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br>上图为公司内外，默认网关为：10.0.0.1</p><h4 id="步骤3-配置VMware的NAT模式设置"><a href="#步骤3-配置VMware的NAT模式设置" class="headerlink" title="步骤3 配置VMware的NAT模式设置"></a>步骤3 配置VMware的NAT模式设置</h4><p><code>如图：</code><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/linux/2015-10-13-0633-linux-centos-03.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h4 id="步骤4-进入centos7系统，执行如下命令修改网络配置"><a href="#步骤4-进入centos7系统，执行如下命令修改网络配置" class="headerlink" title="步骤4 进入centos7系统，执行如下命令修改网络配置"></a>步骤4 进入centos7系统，执行如下命令修改网络配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static          # 静态IP</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=ab60eed1-2349-495d-a33d-2a96c4f8cbb3</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes                #随系统启动</span><br><span class="line">IPADDR=10.0.100.100       #设置固定IP</span><br><span class="line">NETMASK=255.255.255.0     </span><br><span class="line">GATEWAY=10.0.100.2        #第二步中 NAT设置中的网关IP</span><br><span class="line">DNS1=119.29.29.29         #DNSIP，基本上通用</span><br></pre></td></tr></table></figure><p>保存后重启网络服务，执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network.service</span><br></pre></td></tr></table></figure></p><h4 id="步骤5-最后验证网络配置是否成功"><a href="#步骤5-最后验证网络配置是否成功" class="headerlink" title="步骤5 最后验证网络配置是否成功"></a>步骤5 最后验证网络配置是否成功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping baidu.com</span><br></pre></td></tr></table></figure><p><code>结果如图：</code><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/linux/2015-10-13-0633-linux-centos-04.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br>如上图ping通了，就说明NAT模式下的网络配置成功了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;VMware中CentOS7系统设置静态IP的步骤&lt;/strong&gt; &lt;/p&gt;
&lt;h4 id=&quot;VMware下有三种网络连接模式&quot;&gt;&lt;a href=&quot;#VMware下有三种网络连接模式&quot; class=&quot;headerlink&quot; title=&quot;VMware下有三
      
    
    </summary>
    
      <category term="Linux" scheme="https://raoyangsheng.com/categories/Linux/"/>
    
    
      <category term="CentOS" scheme="https://raoyangsheng.com/tags/CentOS/"/>
    
      <category term="VMware" scheme="https://raoyangsheng.com/tags/VMware/"/>
    
  </entry>
  
  <entry>
    <title>CentOS开机网络启动设置问题</title>
    <link href="https://raoyangsheng.com/2015/10/it-linux-centos-01.html"/>
    <id>https://raoyangsheng.com/2015/10/it-linux-centos-01.html</id>
    <published>2015-10-12T12:11:23.000Z</published>
    <updated>2019-12-05T06:12:56.154Z</updated>
    
    <content type="html"><![CDATA[<p><strong>最新安装的CentOS系统，开机总是需要重新设置网络eth0，才能上网，现在下面做了一下设置，就可以开机后自己联网。</strong> </p><h4 id="步骤如下："><a href="#步骤如下：" class="headerlink" title="步骤如下："></a>步骤如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1，输入命令ifconfig，检查eth0设备网络是否没有启动；</span><br><span class="line"></span><br><span class="line">2，如果手动启动，输入命令ifup eth0即可；</span><br><span class="line"></span><br><span class="line">3，如果需要开机后自启动网络，则需要在文件 /etc/rc.local 里加入  </span><br><span class="line">   /sbin/ifup eth0 ，这样重新启动，问题就解决了。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;最新安装的CentOS系统，开机总是需要重新设置网络eth0，才能上网，现在下面做了一下设置，就可以开机后自己联网。&lt;/strong&gt; &lt;/p&gt;
&lt;h4 id=&quot;步骤如下：&quot;&gt;&lt;a href=&quot;#步骤如下：&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="Linux" scheme="https://raoyangsheng.com/categories/Linux/"/>
    
    
      <category term="CentOS" scheme="https://raoyangsheng.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Java并行计算方案</title>
    <link href="https://raoyangsheng.com/2015/10/it-java-calc-forkjoin.html"/>
    <id>https://raoyangsheng.com/2015/10/it-java-calc-forkjoin.html</id>
    <published>2015-10-12T07:12:27.000Z</published>
    <updated>2019-12-05T06:12:56.152Z</updated>
    
    <content type="html"><![CDATA[<p><strong>a、ForkJoin描述：</strong> </p><ul><li>ForkJoin是Java7提供的原生多线程并行处理框架，其基本思想是将大任务分割成小任务，最后将小任务聚合起来得到结果。</li><li>fork是分解的意思, join是收集的意思. 它非常类似于HADOOP提供的MapReduce框架，只是MapReduce的任务可以针对集群内的所有计算节点，可以充分利用集群的能力完成计算任务。ForkJoin更加类似于单机版的MapReduce。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/java/2015-10-12-1512-forkjoin-01.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p><strong>b、注意事项：</strong> </p><ul><li>在fork/join框架中，若某个子问题由于等待另一个子问题的完成而无法继续执行。那么处理该子问题的线程会主动寻找其他尚未运行完成的子问题来执行。这种方式减少了线程的等待时间，提高了性能。子问题中应该避免使用synchronized关键词或其他方式方式的同步。也不应该是一阻塞IO或过多的访问共享变量。在理想情况下，每个子问题的实现中都应该只进行CPU相关的计算，并且只适用每个问题的内部对象。<strong>唯一的同步应该只发生在子问题和创建它的父问题之间。</strong></li></ul><p><strong>c、Fork/Join使用两个类完成以上两件事情：</strong></p><ul><li><p>ForkJoinTask: 我们要使用ForkJoin框架，必须首先创建一个ForkJoin任务。它提供在任务中执行fork()和join的操作机制，ForkJoinTask实现了Future接口，可以按照Future接口的方式来使用。在ForkJoinTask类中之重要的两个方法fork和join。fork方法用以一部方式启动任务的执行，join方法则等待任务完成并返回指向结果。在创建自己的任务是，最好不要直接继承自ForkJoinTask类，而要继承自ForkJoinTask类的子类RecurisiveTask或RecurisiveAction类。<br><code>1. RecursiveAction，用于没有返回结果的任务</code><br><code>2. RecursiveTask，用于有返回值的任务</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/java/2015-10-12-1512-forkjoin-02.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li><p>ForkJoinPool：task要通过ForkJoinPool来执行，分割的子任务也会添加到当前工作线程的双端队列中，进入队列的头部。当一个工作线程中没有任务时，会从其他工作线程的队列尾部获取一个任务。</p></li><li><p>2个构造方法</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ForkJoinPool(int parallelism)  创建一个包含parallelism个并行线程的ForkJoinPool。</span><br><span class="line">ForkJoinPool()  以Runtime.availableProcessors()方法的返回值作为parallelism参数来创建ForkJoinPool。</span><br></pre></td></tr></table></figure><ul><li>3种方式启动</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">异步执行        　 execute(ForkJoinTask)    　　　　 ForkJoinTask.fork</span><br><span class="line">等待获取结果    　　invoke(ForkJoinTask)    　　　　  ForkJoinTask.invoke</span><br><span class="line">执行,获取Future    submit(ForkJoinTask)  　　　　　　ForkJoinTask.fork(ForkJoinTask are Futures)</span><br></pre></td></tr></table></figure><p><strong>d、异常处理: ：</strong></p><ul><li><p>ForkJoinTask在执行的时候可能会抛出异常，但是没办法在主线程里直接捕获异常，所以ForkJoinTask提供了isCompletedAbnormally()方法来检查任务是否已经抛出异常或已经被取消了，并且可以通过ForkJoinTask的getException方法获取异常.</p></li><li><p>getException方法返回Throwable对象，如果任务被取消了则返回CancellationException。如果任务没有完成或者没有抛出异常则返回null。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(task.isCompletedAbnormally()) &#123;</span><br><span class="line">    System.out.println(task.getException());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>e、代码展示</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.ForkJoinPool</span><br><span class="line">import java.util.concurrent.ForkJoinTask</span><br><span class="line">import java.util.concurrent.RecursiveTask</span><br><span class="line">/**</span><br><span class="line"> * fork</span><br><span class="line"> * 对一个大数组进行并行求和的RecursiveTask</span><br><span class="line"> *</span><br><span class="line"> * 大任务可以拆成小任务，小任务还可以继续拆成更小的任务，最后把任务的结果汇总合并，得到最终结果，这种模型就是Fork/Join模型。</span><br><span class="line"> Java7引入了Fork/Join框架，我们通过RecursiveTask这个类就可以方便地实现Fork/Join模式。</span><br><span class="line"> * Created by wenbronk on 2017/7/13.</span><br><span class="line"> */</span><br><span class="line">class ForkJoinTest extends RecursiveTask&lt;Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    static final int THRESHOLD = 100</span><br><span class="line">    long[] array</span><br><span class="line">    int start</span><br><span class="line">    int end</span><br><span class="line"></span><br><span class="line">    ForkJoinTest(long[] array, int start, int end) &#123;</span><br><span class="line">        this.start = start</span><br><span class="line">        this.end = end</span><br><span class="line">        this.array = array</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected Long compute() &#123;</span><br><span class="line"></span><br><span class="line">        if (end - start &lt; THRESHOLD) &#123;</span><br><span class="line">            long sum = 0</span><br><span class="line">            for (int i = start; i &lt; end; i++) &#123;</span><br><span class="line">                sum += array[i]</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(100)</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace()</span><br><span class="line">            &#125;</span><br><span class="line">            println String.format(&apos;compute %d %d = %d&apos;, start, end, sum)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 对于大任务, 分多线程执行</span><br><span class="line">        int middle = (end + start) / 2</span><br><span class="line">        println String.format(&apos;split %d %d =&gt; %d %d, %d %d&apos;, start, end, start, middle, middle, end)</span><br><span class="line"></span><br><span class="line">        def subtask1 = new ForkJoinTest(this.array, start, middle);</span><br><span class="line">        def subtask2 = new ForkJoinTest(this.array, middle, end);</span><br><span class="line">        invokeAll(subtask1, subtask2)</span><br><span class="line"></span><br><span class="line">        Long subresult1 = subtask1.join()</span><br><span class="line">        Long subresult2 = subtask2.join()</span><br><span class="line"></span><br><span class="line">        Long result = subresult1 + subresult2</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;result = &quot; + subresult1 + &quot; + &quot; + subresult2 + &quot; ==&gt; &quot; + result);</span><br><span class="line">        return result</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        // 创建随机数组成的数组:</span><br><span class="line">        long[] array = new long[400];</span><br><span class="line">//        fillRandom(array);</span><br><span class="line">        // fork/join task:</span><br><span class="line">        ForkJoinPool fjp = new ForkJoinPool(4); // 最大并发数4</span><br><span class="line">        ForkJoinTask&lt;Long&gt; task = new ForkJoinTest(array, 0, array.length);</span><br><span class="line">        long startTime = System.currentTimeMillis();</span><br><span class="line">        Long result = fjp.invoke(task);</span><br><span class="line">        long endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(&quot;Fork/join sum: &quot; + result + &quot; in &quot; + (endTime - startTime) + &quot; ms.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>f、java代码的实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package com.doordu.pingan.demo;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line">import java.util.concurrent.ForkJoinPool;</span><br><span class="line">import java.util.concurrent.ForkJoinTask;</span><br><span class="line">import java.util.concurrent.RecursiveTask;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * forkjoin的简单易用</span><br><span class="line"> * Created by wenbronk on 2017/7/26.</span><br><span class="line"> */</span><br><span class="line">public class CountTask extends RecursiveTask&lt;Integer&gt;&#123;</span><br><span class="line">    private volatile static int count = 0;</span><br><span class="line">    private int start;</span><br><span class="line">    private int end;</span><br><span class="line"></span><br><span class="line">    public CountTask(int start, int end) &#123;</span><br><span class="line">        this.start = start;</span><br><span class="line">        this.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static final int threadhold = 2;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Integer compute() &#123;</span><br><span class="line">        int sum = 0;</span><br><span class="line">        System.out.println(&quot;开启了一条线程单独干: &quot; + count++);</span><br><span class="line">        // 如果任务足够小, 就直接执行</span><br><span class="line">        boolean canCompute = (end - start) &lt;= threadhold;</span><br><span class="line">        if (canCompute) &#123;</span><br><span class="line">            for (int i = start; i &lt;= end; i++) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            //任务大于阈值, 分裂为2个任务</span><br><span class="line">            int middle = (start + end) / 2;</span><br><span class="line">            CountTask countTask1 = new CountTask(start, middle);</span><br><span class="line">            CountTask countTask2 = new CountTask(middle + 1, end);</span><br><span class="line"></span><br><span class="line">            // 开启线程</span><br><span class="line">//            countTask1.fork();</span><br><span class="line">//            countTask2.fork();</span><br><span class="line">            invokeAll(countTask1, countTask2);</span><br><span class="line"></span><br><span class="line">            Integer join1 = countTask1.join();</span><br><span class="line">            Integer join2 = countTask2.join();</span><br><span class="line"></span><br><span class="line">            // 结果合并</span><br><span class="line">            sum = join1 + join2;</span><br><span class="line">        &#125;</span><br><span class="line">        return sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 测试</span><br><span class="line">    public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line">        ForkJoinPool forkJoinPool = new ForkJoinPool();</span><br><span class="line"></span><br><span class="line">        CountTask countTask = new CountTask(1, 100);</span><br><span class="line">        ForkJoinTask&lt;Integer&gt; result = forkJoinPool.submit(countTask);</span><br><span class="line">        System.out.println(result.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>g、work-stealing</strong></p><ul><li>g-1 forkjoin 框架是有 work-steal 机制的，这个机制主要功能是：<br><code>“空闲的” worker thread 从其它 worker thread 的 workQueue 里取得“未执行”的 task 然后执行。</code></li><li>g-2 具体细节机制如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、每个 worker thread 维护自己的 scheduling 队列中的“可运行的”task - 队列是一个双向队列（称作：deques），支持 LIFO 和 FIFO 操作。</span><br><span class="line">2、在task 中生成的“子task”，会被放进生成它的 task 所在的 worker thread 的 双向队列。</span><br><span class="line">3、worker thread 处理双向队列中的 task 时，使用的是 LIFO 规则（最后进来的，最先被处理）</span><br><span class="line">4、当worker thread 的队列时没有任务可执行时，它会随机地偷取别的 worker thread 的 work queue 里的 task，然后执行它。在偷取时，使用的是 FIFO 规则，即偷取别人队列里“最先进入”队列的 task。</span><br><span class="line">5、当 worker thread 执行时，遇到了一个join操作（例如：newTask.join），它会暂停当前的 task </span><br><span class="line">的处理，而来处理这个join操作所要执行的任务内容。直到这个join操作的任务执行完后，才会返回刚才暂停任务，继续执行被暂停任务的其它内容。所有 task 都会在不进行“阻塞”情况下完成。 </span><br><span class="line">（这里的“阻塞”的意思，个人理解为不是IO操作的那种阻塞，而是在任务调试时，没有具体的“阻塞”处理（例如：ArrayBlockingQueue的那种阻塞），或是没有用“阻塞的方式”进行任务调度）</span><br><span class="line"></span><br><span class="line">之前以为每次调用 fork 方法，都会生成一个线程，看了源码和进行Debug后才知道：根据构造函数中的parallelism值来，决定是否启动新线程。 </span><br><span class="line">在 fork 方法中，((ForkJoinWorkerThread)t).workQueue.push(this)这语句会把任务加到“当前线程的workQueue”里，进行排队。然后调用signalWork方法，来看是否还可以启动新线程来处理“未分配任务”。如果可以，就启动新线程处理任务。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当 worker thread 没有要执行的 task 或者偷取任务失败时，就会进行暂时等待处理（通过yield，sleep，或者调整优先度等方式），过一段时间再重试看看有没有任务可以执行。如果所有的 worker thread 都处于闲置状态， </span><br><span class="line">等待上层的发送 task 过来的话，就不会进行重试（看是否有任务可以执行）。</span><br></pre></td></tr></table></figure><ul><li>g-3 work-stealing的“LIFO和FIFO”处理方式有两点好处：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、减少了取 task 时的竞争。worker thread 在执行自己队列任务时，是使用从尾部取。别人从它的队列里偷取任务时，是从队列头部取。所以减少了取时的竞争。</span><br><span class="line"></span><br><span class="line">2、被偷取的任务，一般都是最早入队列的任务。这种任务一般来说，都是非常大的任务，是那种需要进行递归分析的的大任务，而不是那种分解完的小任务。所以，减少了任务偷取的次数。 </span><br><span class="line">（注意：在实现上，worker thread 在执行自己队列任务时，不总是 LIFO 方式，可以通过构造函数修改成 FIFO 方式）</span><br></pre></td></tr></table></figure><ul><li>g-4 关于双向队列</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">双向队列在实现方面的主要挑战是“同步”和“its avoidance（不知道怎么翻译）”。即使JVM优化了同步功能，每次 push 和 pop 时都要获取锁的这种操作，也会变成瓶颈。但是，一些策略的改变，提供了一种解决方案：</span><br><span class="line"></span><br><span class="line">push 和 pop 操作，只针对本线程内的队列。</span><br><span class="line">“偷取”操作可以很方便地通过一个“偷取锁”，来进行限制（双向锁在情况需要时，也可以使“偷取”操作失效）。因此，在队列两端的同步问题上的控制操作，就会减少。</span><br><span class="line">当双向队列要变成空时，可以对pop 或“偷取”操作进行控制。不然，这两个操作要被担保，可以操作disjoint elements of the array</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;a、ForkJoin描述：&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ForkJoin是Java7提供的原生多线程并行处理框架，其基本思想是将大任务分割成小任务，最后将小任务聚合起来得到结果。&lt;/li&gt;
&lt;li&gt;fork是分解的意思, join是收集的意
      
    
    </summary>
    
      <category term="后端" scheme="https://raoyangsheng.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="JAVA" scheme="https://raoyangsheng.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>问题记录-Mysql 1449 The user specified as a definer (&#39;root&#39;@&#39;%&#39;) does not exist 解决方法</title>
    <link href="https://raoyangsheng.com/2015/10/it-db-mysql-01.html"/>
    <id>https://raoyangsheng.com/2015/10/it-db-mysql-01.html</id>
    <published>2015-10-04T11:18:31.000Z</published>
    <updated>2019-12-05T06:12:56.150Z</updated>
    
    <content type="html"><![CDATA[<p><strong>最近做项目是将线上数据库导入到本地localhost后程序调用视图时报mysql 1449错误。</strong> </p><h4 id="问题说明："><a href="#问题说明：" class="headerlink" title="问题说明："></a>问题说明：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">从一个数据库数据迁移到本地localhost</span><br><span class="line">程序在调用到数据库的视图时报错，直接在数据库中打开视图时也报错，类似：</span><br><span class="line"></span><br><span class="line">mysql 1449 ： The user specified as a definer (&apos;montor&apos;@&apos;%&apos;) does not exist</span><br><span class="line">经查，是权限问题，解决办法 授权 给 root  所有sql 的权限。</span><br></pre></td></tr></table></figure><p><code>如图所示</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/db/2015-10-04-1918-mysql-01.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h4 id="解决问题："><a href="#解决问题：" class="headerlink" title="解决问题："></a>解决问题：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1，授权 给 root  所有sql 权限;</span><br><span class="line">2，运行：grant all privileges on *.* to monitor@&quot;%&quot; identified by &quot;.&quot;;</span><br><span class="line"></span><br><span class="line">mysql&gt; grant all privileges on *.* to root@&quot;%&quot; identified by &quot;.&quot;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>最后打开视图时便不会报错，程序调用也不会报错。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;最近做项目是将线上数据库导入到本地localhost后程序调用视图时报mysql 1449错误。&lt;/strong&gt; &lt;/p&gt;
&lt;h4 id=&quot;问题说明：&quot;&gt;&lt;a href=&quot;#问题说明：&quot; class=&quot;headerlink&quot; title=&quot;问题说明：&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="数据库" scheme="https://raoyangsheng.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://raoyangsheng.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>解决eclipse中git插件中的cannot open git-upload-pack问题</title>
    <link href="https://raoyangsheng.com/2015/10/it-java-tool-02.html"/>
    <id>https://raoyangsheng.com/2015/10/it-java-tool-02.html</id>
    <published>2015-10-02T23:15:22.000Z</published>
    <updated>2019-12-05T06:12:56.153Z</updated>
    
    <content type="html"><![CDATA[<p><strong>最近使用Eclipse向git同步代码时，出现cannot open git-upload-pack这个问题，后来找资料发现是Eclipse中git插件的配置问题。</strong> </p><h4 id="下面是处理方法："><a href="#下面是处理方法：" class="headerlink" title="下面是处理方法："></a>下面是处理方法：</h4><p><code>1):打开eclipse中的windows--&gt;Preferences--&gt;Team--&gt;Git--&gt;Configuration--&gt;User Settings.</code><br><code>2):然后点Add Entry新建一个键值对，输入http.sslVerify=false</code></p><p>如图所示:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/java/2015-10-03-0712-jdk-tools-04.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>然后确定即可解决问题，之后就发现git可以正常的pull和push了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;最近使用Eclipse向git同步代码时，出现cannot open git-upload-pack这个问题，后来找资料发现是Eclipse中git插件的配置问题。&lt;/strong&gt; &lt;/p&gt;
&lt;h4 id=&quot;下面是处理方法：&quot;&gt;&lt;a href=&quot;#下面是处
      
    
    </summary>
    
      <category term="后端" scheme="https://raoyangsheng.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Git" scheme="https://raoyangsheng.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>jvisualvm监控远程SpringBoot应用</title>
    <link href="https://raoyangsheng.com/2015/10/it-java-tool-01.html"/>
    <id>https://raoyangsheng.com/2015/10/it-java-tool-01.html</id>
    <published>2015-10-02T23:12:36.000Z</published>
    <updated>2019-12-05T06:12:56.152Z</updated>
    
    <content type="html"><![CDATA[<p><strong>使用Java自带jvisualvm工具来监控远程SpringBoot应用的运行情况步骤</strong> </p><h4 id="第一步骤：增加启动参数配置："><a href="#第一步骤：增加启动参数配置：" class="headerlink" title="第一步骤：增加启动参数配置："></a>第一步骤：增加启动参数配置：</h4><p>通常SpringBoot应用启动方式为：</p><p>java -jar springboot应用.jar</p><p>远程监控命令在java 与-jar之间增加，如下：<br><code>java -Djava.rmi.server.hostname=10.0.0.222 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=60001 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -jar springboot应用.jar 即可</code></p><p>格式化后如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java  \</span><br><span class="line">-Djava.rmi.server.hostname=10.0.0.222 \</span><br><span class="line">-Dcom.sun.management.jmxremote \</span><br><span class="line">-Dcom.sun.management.jmxremote.port=60001 \</span><br><span class="line">-Dcom.sun.management.jmxremote.authenticate=false \</span><br><span class="line">-Dcom.sun.management.jmxremote.ssl=false \</span><br><span class="line">-jar springboot应用.jar</span><br></pre></td></tr></table></figure></p><p>是不是觉得启动参数太长了，可以在系统环境变量中配置这些参数，如在/etc/profile 最后一行增加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_OPTS=&apos;-Djava.rmi.server.hostname=10.0.0.222 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=60001 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false&apos;</span><br><span class="line">执行 source /etc/profile ，是环境变量立马生效；</span><br></pre></td></tr></table></figure></p><p>配置完环境变量后，只需执行如下命令即可完成远程监控：<br><code>java $JAVA_OPTS -jar springboot应用.jar</code></p><h4 id="第二步骤：配置jvisualvm"><a href="#第二步骤：配置jvisualvm" class="headerlink" title="第二步骤：配置jvisualvm"></a>第二步骤：配置jvisualvm</h4><p><code>a，添加远程主机：</code><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/java/2015-10-03-0712-jdk-tools-01.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p><code>b，右键已添加的远程主机，添加JMX连接，如图：</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/java/2015-10-03-0712-jdk-tools-02.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p><code>c，点击确定即可完成配置</code></p><p><code>d，最后双击已经填好的JMX连接，就能监控到cpu、堆、类、线程的使用情况，如下图：</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/java/2015-10-03-0712-jdk-tools-03.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>看到上图表示配置成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;使用Java自带jvisualvm工具来监控远程SpringBoot应用的运行情况步骤&lt;/strong&gt; &lt;/p&gt;
&lt;h4 id=&quot;第一步骤：增加启动参数配置：&quot;&gt;&lt;a href=&quot;#第一步骤：增加启动参数配置：&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="后端" scheme="https://raoyangsheng.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="SpringBoot" scheme="https://raoyangsheng.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper 集群搭建</title>
    <link href="https://raoyangsheng.com/2015/10/it-backend-zk-01.html"/>
    <id>https://raoyangsheng.com/2015/10/it-backend-zk-01.html</id>
    <published>2015-10-02T09:59:11.000Z</published>
    <updated>2019-12-05T06:12:56.150Z</updated>
    
    <content type="html"><![CDATA[<p><strong>如近分布式架构常用到Zookeeper组建，下面来介绍下Zookeeper集群的搭建方法</strong> </p><h4 id="第一步：下载并上传zookeeper-3-4-6-tar-gz到各个服务器的-usr-local-目录-或者使用wget命令"><a href="#第一步：下载并上传zookeeper-3-4-6-tar-gz到各个服务器的-usr-local-目录-或者使用wget命令" class="headerlink" title="第一步：下载并上传zookeeper-3.4.6.tar.gz到各个服务器的/usr/local/目录,或者使用wget命令"></a>第一步：下载并上传zookeeper-3.4.6.tar.gz到各个服务器的/usr/local/目录,或者使用wget命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line">wget http://apache.fayea.com/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz</span><br><span class="line">tar -zxvf zookeeper-3.4.6.tar.gz</span><br></pre></td></tr></table></figure><h4 id="第二步：在各个服务器上解压zookeeper安装包，并按节点号对zookeeper目录重命名"><a href="#第二步：在各个服务器上解压zookeeper安装包，并按节点号对zookeeper目录重命名" class="headerlink" title="第二步：在各个服务器上解压zookeeper安装包，并按节点号对zookeeper目录重命名"></a>第二步：在各个服务器上解压zookeeper安装包，并按节点号对zookeeper目录重命名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 服务器1</span><br><span class="line">cp -r zookeeper-3.4.6 zookeeper-3.4.6_1</span><br><span class="line"># 服务器2</span><br><span class="line">cp -r zookeeper-3.4.6 zookeeper-3.4.6_2</span><br><span class="line"># 服务器3</span><br><span class="line">cp -r zookeeper-3.4.6 zookeeper-3.4.6_3</span><br></pre></td></tr></table></figure><h4 id="第三步：在各zookeeper节点目录下创建以下目录"><a href="#第三步：在各zookeeper节点目录下创建以下目录" class="headerlink" title="第三步：在各zookeeper节点目录下创建以下目录"></a>第三步：在各zookeeper节点目录下创建以下目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/zookeeper-3.4.6_1</span><br><span class="line">mkdir data</span><br><span class="line">mkdir logs</span><br><span class="line">cd /usr/local/zookeeper-3.4.6_2</span><br><span class="line">mkdir data</span><br><span class="line">mkdir logs</span><br><span class="line">cd /usr/local/zookeeper-3.4.6_3</span><br><span class="line">mkdir data</span><br><span class="line">mkdir logs</span><br></pre></td></tr></table></figure><h4 id="第四步：将各节点zookeeper-zookeeper-3-4-6-x-conf目录下的zoo-sample-cfg文件拷贝一份，命名为zoo-cfg"><a href="#第四步：将各节点zookeeper-zookeeper-3-4-6-x-conf目录下的zoo-sample-cfg文件拷贝一份，命名为zoo-cfg" class="headerlink" title="第四步：将各节点zookeeper/zookeeper-3.4.6_x/conf目录下的zoo_sample.cfg文件拷贝一份，命名为zoo.cfg"></a>第四步：将各节点zookeeper/zookeeper-3.4.6_x/conf目录下的zoo_sample.cfg文件拷贝一份，命名为zoo.cfg</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/zookeeper-3.4.6_1/conf</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line">cd /usr/local/zookeeper-3.4.6_2/conf</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line">cd /usr/local/zookeeper-3.4.6_3/conf</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><h4 id="第五步：修改-zoo-cfg-配置文件"><a href="#第五步：修改-zoo-cfg-配置文件" class="headerlink" title="第五步：修改 zoo.cfg 配置文件"></a>第五步：修改 zoo.cfg 配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/zookeeper-3.4.6_1/conf</span><br><span class="line"># 设置内容如下：</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/usr/local/zookeeper-3.4.6_1/data</span><br><span class="line">dataLogDir=/usr/local/zookeeper-3.4.6_1/logs</span><br><span class="line">clientPort=2181</span><br><span class="line">server.1=127.0.0.1:2881:3881</span><br><span class="line">server.2=127.0.0.1:2882:3882</span><br><span class="line">server.3=127.0.0.1:2883:3883</span><br><span class="line"># -----------------------------------</span><br><span class="line">cd /usr/local/zookeeper-3.4.6_2/conf</span><br><span class="line">vi zoo.cfg</span><br><span class="line"># 设置内容如下：</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/usr/local/zookeeper-3.4.6_2/data</span><br><span class="line">dataLogDir=/usr/local/zookeeper-3.4.6_2/logs</span><br><span class="line">clientPort=2182</span><br><span class="line">server.1=127.0.0.1:2881:3881</span><br><span class="line">server.2=127.0.0.1:2882:3882</span><br><span class="line">server.3=127.0.0.1:2883:3883</span><br><span class="line"># -----------------------------------</span><br><span class="line">cd /usr/local/zookeeper-3.4.6_3/conf</span><br><span class="line">vi zoo.cfg</span><br><span class="line"># 设置内容如下：</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/usr/local/zookeeper-3.4.6_3/data</span><br><span class="line">dataLogDir=/usr/local/zookeeper-3.4.6_3/logs</span><br><span class="line">clientPort=2183</span><br><span class="line">server.1=127.0.0.1:2881:3881</span><br><span class="line">server.2=127.0.0.1:2882:3882</span><br><span class="line">server.3=127.0.0.1:2883:3883</span><br></pre></td></tr></table></figure><h4 id="第六步：在dataDir-usr-local-zookeeper-3-4-6-x-data下创建-myid-文件"><a href="#第六步：在dataDir-usr-local-zookeeper-3-4-6-x-data下创建-myid-文件" class="headerlink" title="第六步：在dataDir=/usr/local/zookeeper-3.4.6_x/data下创建 myid 文件"></a>第六步：在dataDir=/usr/local/zookeeper-3.4.6_x/data下创建 myid 文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/zookeeper-3.4.6_1/data/myid #设置值为1</span><br><span class="line">vi /usr/local/zookeeper-3.4.6_2/data/myid #设置值为2</span><br><span class="line">vi /usr/local/zookeeper-3.4.6_3/data/myid #设置值为3</span><br></pre></td></tr></table></figure><h4 id="第七步：启动并查看zookeeper"><a href="#第七步：启动并查看zookeeper" class="headerlink" title="第七步：启动并查看zookeeper"></a>第七步：启动并查看zookeeper</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">/usr/local/zookeeper-3.4.6_1/bin/zkServer.sh start</span><br><span class="line">/usr/local/zookeeper-3.4.6_2/bin/zkServer.sh start</span><br><span class="line">/usr/local/zookeeper-3.4.6_3/bin/zkServer.sh start</span><br></pre></td></tr></table></figure><h4 id="第八步：验证zookeeper启动情况"><a href="#第八步：验证zookeeper启动情况" class="headerlink" title="第八步：验证zookeeper启动情况"></a>第八步：验证zookeeper启动情况</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/zookeeper-3.4.6_1/bin/zkServer.sh status</span><br><span class="line">/usr/local/zookeeper-3.4.6_2/bin/zkServer.sh status</span><br><span class="line">/usr/local/zookeeper-3.4.6_3/bin/zkServer.sh status</span><br></pre></td></tr></table></figure><h4 id="第九步：如果启动成功，三台机器结果类似如下-标红部分为一个leader-两个follower"><a href="#第九步：如果启动成功，三台机器结果类似如下-标红部分为一个leader-两个follower" class="headerlink" title="第九步：如果启动成功，三台机器结果类似如下,标红部分为一个leader,两个follower"></a>第九步：如果启动成功，三台机器结果类似如下,标红部分为一个leader,两个follower</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 local]# /usr/local/zookeeper-3.4.6_1/bin/zkServer.sh status</span><br><span class="line">JMX enabled by default</span><br><span class="line">Using config: /usr/local/zookeeper-3.4.6_1/bin/../conf/zoo.cfg</span><br><span class="line">Mode: &quot;follower&quot;</span><br><span class="line">[root@centos7 local]# /usr/local/zookeeper-3.4.6_2/bin/zkServer.sh status</span><br><span class="line">JMX enabled by default</span><br><span class="line">Using config: /usr/local/zookeeper-3.4.6_2/bin/../conf/zoo.cfg</span><br><span class="line">Mode: &quot;leader&quot;</span><br><span class="line">[root@centos7 local]# /usr/local/zookeeper-3.4.6_3/bin/zkServer.sh status</span><br><span class="line">JMX enabled by default</span><br><span class="line">Using config: /usr/local/zookeeper-3.4.6_3/bin/../conf/zoo.cfg</span><br><span class="line">Mode: &quot;follower&quot;</span><br></pre></td></tr></table></figure><p>此时zookeeper集群搭建成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;如近分布式架构常用到Zookeeper组建，下面来介绍下Zookeeper集群的搭建方法&lt;/strong&gt; &lt;/p&gt;
&lt;h4 id=&quot;第一步：下载并上传zookeeper-3-4-6-tar-gz到各个服务器的-usr-local-目录-或者使用wget命
      
    
    </summary>
    
      <category term="后端" scheme="https://raoyangsheng.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Zookeeper" scheme="https://raoyangsheng.com/tags/Zookeeper/"/>
    
      <category term="集群" scheme="https://raoyangsheng.com/tags/%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux下如何释放cache内存(drop_caches)</title>
    <link href="https://raoyangsheng.com/2015/10/it-linux-03.html"/>
    <id>https://raoyangsheng.com/2015/10/it-linux-03.html</id>
    <published>2015-10-01T12:11:12.000Z</published>
    <updated>2019-12-05T06:12:56.154Z</updated>
    
    <content type="html"><![CDATA[<p><strong>最近使用的linux系统内存缓存越来越大，free内存越来越小，后来从网上找到资料完美解决。</strong> </p><h4 id="第1步：执行-cat-proc-sys-vm-drop-caches名称，查看缓存值，默认值为0。（1-清空页缓存；2-清空inode和目录树缓存；3-清空所有缓存）"><a href="#第1步：执行-cat-proc-sys-vm-drop-caches名称，查看缓存值，默认值为0。（1-清空页缓存；2-清空inode和目录树缓存；3-清空所有缓存）" class="headerlink" title="第1步：执行 cat /proc/sys/vm/drop_caches名称，查看缓存值，默认值为0。（1-清空页缓存；2-清空inode和目录树缓存；3-清空所有缓存）"></a>第1步：执行 cat /proc/sys/vm/drop_caches名称，查看缓存值，默认值为0。（1-清空页缓存；2-清空inode和目录树缓存；3-清空所有缓存）</h4><h4 id="第2步：执行sync命令，手动执行sync命令（描述：sync-命令运行-sync-子例程。如果必须停止系统，则运行-sync-命令以确保文件系统的完整性。sync-命令将所有未写的系统缓冲区写到磁盘中，包含已修改的-i-node、已延迟的块-I-O-和读写映射文件）"><a href="#第2步：执行sync命令，手动执行sync命令（描述：sync-命令运行-sync-子例程。如果必须停止系统，则运行-sync-命令以确保文件系统的完整性。sync-命令将所有未写的系统缓冲区写到磁盘中，包含已修改的-i-node、已延迟的块-I-O-和读写映射文件）" class="headerlink" title="第2步：执行sync命令，手动执行sync命令（描述：sync 命令运行 sync 子例程。如果必须停止系统，则运行 sync 命令以确保文件系统的完整性。sync 命令将所有未写的系统缓冲区写到磁盘中，包含已修改的 i-node、已延迟的块 I/O 和读写映射文件）"></a>第2步：执行sync命令，手动执行sync命令（描述：sync 命令运行 sync 子例程。如果必须停止系统，则运行 sync 命令以确保文件系统的完整性。sync 命令将所有未写的系统缓冲区写到磁盘中，包含已修改的 i-node、已延迟的块 I/O 和读写映射文件）</h4><h4 id="第3步：执行echo-3-gt-gt-proc-sys-vm-drop-caches-命令，将drop-caches值改成3。"><a href="#第3步：执行echo-3-gt-gt-proc-sys-vm-drop-caches-命令，将drop-caches值改成3。" class="headerlink" title="第3步：执行echo 3 &gt;&gt; /proc/sys/vm/drop_caches 命令，将drop_caches值改成3。"></a>第3步：执行echo 3 &gt;&gt; /proc/sys/vm/drop_caches 命令，将drop_caches值改成3。</h4><p>此时已经完成，可执行 free -m 命令查看是否生效。</p><p><code>如图：</code><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/linux/2015-10-01-2011-linux-01.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;最近使用的linux系统内存缓存越来越大，free内存越来越小，后来从网上找到资料完美解决。&lt;/strong&gt; &lt;/p&gt;
&lt;h4 id=&quot;第1步：执行-cat-proc-sys-vm-drop-caches名称，查看缓存值，默认值为0。（1-清空页缓存；2-
      
    
    </summary>
    
      <category term="Linux" scheme="https://raoyangsheng.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://raoyangsheng.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux修改主机名称、DNS解析</title>
    <link href="https://raoyangsheng.com/2015/10/it-linux-02.html"/>
    <id>https://raoyangsheng.com/2015/10/it-linux-02.html</id>
    <published>2015-10-01T11:22:32.000Z</published>
    <updated>2019-12-05T06:12:56.153Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Linux修改主机名称、DNS解析步骤</strong> </p><h4 id="inux更改主机名称："><a href="#inux更改主机名称：" class="headerlink" title="inux更改主机名称："></a>inux更改主机名称：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">vi /etc/sysconfig/network打开配置文件</span><br><span class="line"></span><br><span class="line">设置HOSTNAME=hadoop(自己想更改的名称)</span><br><span class="line"></span><br><span class="line">退出保存即可</span><br><span class="line"></span><br><span class="line">测试：重启机器</span><br></pre></td></tr></table></figure><h4 id="设置DNS域名解析："><a href="#设置DNS域名解析：" class="headerlink" title="设置DNS域名解析："></a>设置DNS域名解析：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">vi /etc/hosts打开配置文件</span><br><span class="line"></span><br><span class="line">在最后加入：ip地址 域名称（192.168.110.101 hadoop）</span><br><span class="line"></span><br><span class="line">保存退出即可</span><br><span class="line"></span><br><span class="line">测试：ping hadoop</span><br></pre></td></tr></table></figure><h4 id="设置ip地址："><a href="#设置ip地址：" class="headerlink" title="设置ip地址："></a>设置ip地址：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">查看ip地址：ifconfig</span><br><span class="line"></span><br><span class="line">修改ip地址：vi /etc/sysconfig/network-scripts/ifcfg-eth0 打开配置文件</span><br><span class="line"></span><br><span class="line">设置ip地址，网关、域名等</span><br><span class="line"></span><br><span class="line">保存退出，执行命令：service network restart</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Linux修改主机名称、DNS解析步骤&lt;/strong&gt; &lt;/p&gt;
&lt;h4 id=&quot;inux更改主机名称：&quot;&gt;&lt;a href=&quot;#inux更改主机名称：&quot; class=&quot;headerlink&quot; title=&quot;inux更改主机名称：&quot;&gt;&lt;/a&gt;inux更改主机
      
    
    </summary>
    
      <category term="Linux" scheme="https://raoyangsheng.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://raoyangsheng.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux下关闭防火墙</title>
    <link href="https://raoyangsheng.com/2015/10/it-linux-01.html"/>
    <id>https://raoyangsheng.com/2015/10/it-linux-01.html</id>
    <published>2015-10-01T11:13:42.000Z</published>
    <updated>2019-12-05T06:12:56.153Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Linux下关闭防火墙步骤</strong> </p><h4 id="步骤如下："><a href="#步骤如下：" class="headerlink" title="步骤如下："></a>步骤如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1、首先使用chkconfig --list iptables查看防火墙（服务）的状态</span><br><span class="line">    [ 查看指定的服务状态：chkconfig --list 服务名 ]</span><br><span class="line"></span><br><span class="line">2、可以看到服务的各个级别的启动状态（应该有6个级别）</span><br><span class="line"></span><br><span class="line">3、执行命令chkconfig iptables off 永久性关闭防火墙（在此处我们不是单独的关闭某一个级别的状态，而是关闭所有级别）</span><br><span class="line"></span><br><span class="line">4、执行命令chkconfig iptables on开启防火墙</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Linux下关闭防火墙步骤&lt;/strong&gt; &lt;/p&gt;
&lt;h4 id=&quot;步骤如下：&quot;&gt;&lt;a href=&quot;#步骤如下：&quot; class=&quot;headerlink&quot; title=&quot;步骤如下：&quot;&gt;&lt;/a&gt;步骤如下：&lt;/h4&gt;&lt;figure class=&quot;highlig
      
    
    </summary>
    
      <category term="Linux" scheme="https://raoyangsheng.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://raoyangsheng.com/tags/Linux/"/>
    
  </entry>
  
</feed>
